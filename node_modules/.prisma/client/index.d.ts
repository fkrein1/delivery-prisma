
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model DeliveryMan
 * 
 */
export type DeliveryMan = {
  id: string
  username: string
  password: string
}

/**
 * Model Clients
 * 
 */
export type Clients = {
  id: string
  username: string
  password: string
}

/**
 * Model Deliveries
 * 
 */
export type Deliveries = {
  id: string
  id_client: string
  id_deliveryman: string
  item_name: string
  created_at: Date
  end_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more DeliveryMen
 * const deliveryMen = await prisma.deliveryMan.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more DeliveryMen
   * const deliveryMen = await prisma.deliveryMan.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.deliveryMan`: Exposes CRUD operations for the **DeliveryMan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeliveryMen
    * const deliveryMen = await prisma.deliveryMan.findMany()
    * ```
    */
  get deliveryMan(): Prisma.DeliveryManDelegate<GlobalReject>;

  /**
   * `prisma.clients`: Exposes CRUD operations for the **Clients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.clients.findMany()
    * ```
    */
  get clients(): Prisma.ClientsDelegate<GlobalReject>;

  /**
   * `prisma.deliveries`: Exposes CRUD operations for the **Deliveries** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deliveries
    * const deliveries = await prisma.deliveries.findMany()
    * ```
    */
  get deliveries(): Prisma.DeliveriesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.4.0
   * Query Engine version: f352a33b70356f46311da8b00d83386dd9f145d6
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    DeliveryMan: 'DeliveryMan',
    Clients: 'Clients',
    Deliveries: 'Deliveries'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DeliveryManCountOutputType
   */


  export type DeliveryManCountOutputType = {
    Deliveries: number
  }

  export type DeliveryManCountOutputTypeSelect = {
    Deliveries?: boolean
  }

  export type DeliveryManCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DeliveryManCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DeliveryManCountOutputType
    : S extends undefined
    ? never
    : S extends DeliveryManCountOutputTypeArgs
    ?'include' extends U
    ? DeliveryManCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof DeliveryManCountOutputType ? DeliveryManCountOutputType[P] : never
  } 
    : DeliveryManCountOutputType
  : DeliveryManCountOutputType




  // Custom InputTypes

  /**
   * DeliveryManCountOutputType without action
   */
  export type DeliveryManCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DeliveryManCountOutputType
     * 
    **/
    select?: DeliveryManCountOutputTypeSelect | null
  }



  /**
   * Count Type ClientsCountOutputType
   */


  export type ClientsCountOutputType = {
    Deliveries: number
  }

  export type ClientsCountOutputTypeSelect = {
    Deliveries?: boolean
  }

  export type ClientsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ClientsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ClientsCountOutputType
    : S extends undefined
    ? never
    : S extends ClientsCountOutputTypeArgs
    ?'include' extends U
    ? ClientsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ClientsCountOutputType ? ClientsCountOutputType[P] : never
  } 
    : ClientsCountOutputType
  : ClientsCountOutputType




  // Custom InputTypes

  /**
   * ClientsCountOutputType without action
   */
  export type ClientsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClientsCountOutputType
     * 
    **/
    select?: ClientsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model DeliveryMan
   */


  export type AggregateDeliveryMan = {
    _count: DeliveryManCountAggregateOutputType | null
    _min: DeliveryManMinAggregateOutputType | null
    _max: DeliveryManMaxAggregateOutputType | null
  }

  export type DeliveryManMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type DeliveryManMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type DeliveryManCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type DeliveryManMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type DeliveryManMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type DeliveryManCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type DeliveryManAggregateArgs = {
    /**
     * Filter which DeliveryMan to aggregate.
     * 
    **/
    where?: DeliveryManWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryMen to fetch.
     * 
    **/
    orderBy?: Enumerable<DeliveryManOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DeliveryManWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryMen from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryMen.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeliveryMen
    **/
    _count?: true | DeliveryManCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeliveryManMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeliveryManMaxAggregateInputType
  }

  export type GetDeliveryManAggregateType<T extends DeliveryManAggregateArgs> = {
        [P in keyof T & keyof AggregateDeliveryMan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeliveryMan[P]>
      : GetScalarType<T[P], AggregateDeliveryMan[P]>
  }




  export type DeliveryManGroupByArgs = {
    where?: DeliveryManWhereInput
    orderBy?: Enumerable<DeliveryManOrderByWithAggregationInput>
    by: Array<DeliveryManScalarFieldEnum>
    having?: DeliveryManScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeliveryManCountAggregateInputType | true
    _min?: DeliveryManMinAggregateInputType
    _max?: DeliveryManMaxAggregateInputType
  }


  export type DeliveryManGroupByOutputType = {
    id: string
    username: string
    password: string
    _count: DeliveryManCountAggregateOutputType | null
    _min: DeliveryManMinAggregateOutputType | null
    _max: DeliveryManMaxAggregateOutputType | null
  }

  type GetDeliveryManGroupByPayload<T extends DeliveryManGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DeliveryManGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeliveryManGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeliveryManGroupByOutputType[P]>
            : GetScalarType<T[P], DeliveryManGroupByOutputType[P]>
        }
      >
    >


  export type DeliveryManSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    Deliveries?: boolean | DeliveriesFindManyArgs
    _count?: boolean | DeliveryManCountOutputTypeArgs
  }

  export type DeliveryManInclude = {
    Deliveries?: boolean | DeliveriesFindManyArgs
    _count?: boolean | DeliveryManCountOutputTypeArgs
  }

  export type DeliveryManGetPayload<
    S extends boolean | null | undefined | DeliveryManArgs,
    U = keyof S
      > = S extends true
        ? DeliveryMan
    : S extends undefined
    ? never
    : S extends DeliveryManArgs | DeliveryManFindManyArgs
    ?'include' extends U
    ? DeliveryMan  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Deliveries' ? Array < DeliveriesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? DeliveryManCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Deliveries' ? Array < DeliveriesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? DeliveryManCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof DeliveryMan ? DeliveryMan[P] : never
  } 
    : DeliveryMan
  : DeliveryMan


  type DeliveryManCountArgs = Merge<
    Omit<DeliveryManFindManyArgs, 'select' | 'include'> & {
      select?: DeliveryManCountAggregateInputType | true
    }
  >

  export interface DeliveryManDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one DeliveryMan that matches the filter.
     * @param {DeliveryManFindUniqueArgs} args - Arguments to find a DeliveryMan
     * @example
     * // Get one DeliveryMan
     * const deliveryMan = await prisma.deliveryMan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DeliveryManFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DeliveryManFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DeliveryMan'> extends True ? CheckSelect<T, Prisma__DeliveryManClient<DeliveryMan>, Prisma__DeliveryManClient<DeliveryManGetPayload<T>>> : CheckSelect<T, Prisma__DeliveryManClient<DeliveryMan | null, null>, Prisma__DeliveryManClient<DeliveryManGetPayload<T> | null, null>>

    /**
     * Find the first DeliveryMan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryManFindFirstArgs} args - Arguments to find a DeliveryMan
     * @example
     * // Get one DeliveryMan
     * const deliveryMan = await prisma.deliveryMan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DeliveryManFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DeliveryManFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DeliveryMan'> extends True ? CheckSelect<T, Prisma__DeliveryManClient<DeliveryMan>, Prisma__DeliveryManClient<DeliveryManGetPayload<T>>> : CheckSelect<T, Prisma__DeliveryManClient<DeliveryMan | null, null>, Prisma__DeliveryManClient<DeliveryManGetPayload<T> | null, null>>

    /**
     * Find zero or more DeliveryMen that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryManFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeliveryMen
     * const deliveryMen = await prisma.deliveryMan.findMany()
     * 
     * // Get first 10 DeliveryMen
     * const deliveryMen = await prisma.deliveryMan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deliveryManWithIdOnly = await prisma.deliveryMan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DeliveryManFindManyArgs>(
      args?: SelectSubset<T, DeliveryManFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DeliveryMan>>, PrismaPromise<Array<DeliveryManGetPayload<T>>>>

    /**
     * Create a DeliveryMan.
     * @param {DeliveryManCreateArgs} args - Arguments to create a DeliveryMan.
     * @example
     * // Create one DeliveryMan
     * const DeliveryMan = await prisma.deliveryMan.create({
     *   data: {
     *     // ... data to create a DeliveryMan
     *   }
     * })
     * 
    **/
    create<T extends DeliveryManCreateArgs>(
      args: SelectSubset<T, DeliveryManCreateArgs>
    ): CheckSelect<T, Prisma__DeliveryManClient<DeliveryMan>, Prisma__DeliveryManClient<DeliveryManGetPayload<T>>>

    /**
     * Create many DeliveryMen.
     *     @param {DeliveryManCreateManyArgs} args - Arguments to create many DeliveryMen.
     *     @example
     *     // Create many DeliveryMen
     *     const deliveryMan = await prisma.deliveryMan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DeliveryManCreateManyArgs>(
      args?: SelectSubset<T, DeliveryManCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DeliveryMan.
     * @param {DeliveryManDeleteArgs} args - Arguments to delete one DeliveryMan.
     * @example
     * // Delete one DeliveryMan
     * const DeliveryMan = await prisma.deliveryMan.delete({
     *   where: {
     *     // ... filter to delete one DeliveryMan
     *   }
     * })
     * 
    **/
    delete<T extends DeliveryManDeleteArgs>(
      args: SelectSubset<T, DeliveryManDeleteArgs>
    ): CheckSelect<T, Prisma__DeliveryManClient<DeliveryMan>, Prisma__DeliveryManClient<DeliveryManGetPayload<T>>>

    /**
     * Update one DeliveryMan.
     * @param {DeliveryManUpdateArgs} args - Arguments to update one DeliveryMan.
     * @example
     * // Update one DeliveryMan
     * const deliveryMan = await prisma.deliveryMan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DeliveryManUpdateArgs>(
      args: SelectSubset<T, DeliveryManUpdateArgs>
    ): CheckSelect<T, Prisma__DeliveryManClient<DeliveryMan>, Prisma__DeliveryManClient<DeliveryManGetPayload<T>>>

    /**
     * Delete zero or more DeliveryMen.
     * @param {DeliveryManDeleteManyArgs} args - Arguments to filter DeliveryMen to delete.
     * @example
     * // Delete a few DeliveryMen
     * const { count } = await prisma.deliveryMan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DeliveryManDeleteManyArgs>(
      args?: SelectSubset<T, DeliveryManDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeliveryMen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryManUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeliveryMen
     * const deliveryMan = await prisma.deliveryMan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DeliveryManUpdateManyArgs>(
      args: SelectSubset<T, DeliveryManUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DeliveryMan.
     * @param {DeliveryManUpsertArgs} args - Arguments to update or create a DeliveryMan.
     * @example
     * // Update or create a DeliveryMan
     * const deliveryMan = await prisma.deliveryMan.upsert({
     *   create: {
     *     // ... data to create a DeliveryMan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeliveryMan we want to update
     *   }
     * })
    **/
    upsert<T extends DeliveryManUpsertArgs>(
      args: SelectSubset<T, DeliveryManUpsertArgs>
    ): CheckSelect<T, Prisma__DeliveryManClient<DeliveryMan>, Prisma__DeliveryManClient<DeliveryManGetPayload<T>>>

    /**
     * Find one DeliveryMan that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {DeliveryManFindUniqueOrThrowArgs} args - Arguments to find a DeliveryMan
     * @example
     * // Get one DeliveryMan
     * const deliveryMan = await prisma.deliveryMan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DeliveryManFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DeliveryManFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__DeliveryManClient<DeliveryMan>, Prisma__DeliveryManClient<DeliveryManGetPayload<T>>>

    /**
     * Find the first DeliveryMan that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryManFindFirstOrThrowArgs} args - Arguments to find a DeliveryMan
     * @example
     * // Get one DeliveryMan
     * const deliveryMan = await prisma.deliveryMan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DeliveryManFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DeliveryManFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__DeliveryManClient<DeliveryMan>, Prisma__DeliveryManClient<DeliveryManGetPayload<T>>>

    /**
     * Count the number of DeliveryMen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryManCountArgs} args - Arguments to filter DeliveryMen to count.
     * @example
     * // Count the number of DeliveryMen
     * const count = await prisma.deliveryMan.count({
     *   where: {
     *     // ... the filter for the DeliveryMen we want to count
     *   }
     * })
    **/
    count<T extends DeliveryManCountArgs>(
      args?: Subset<T, DeliveryManCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeliveryManCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeliveryMan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryManAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeliveryManAggregateArgs>(args: Subset<T, DeliveryManAggregateArgs>): PrismaPromise<GetDeliveryManAggregateType<T>>

    /**
     * Group by DeliveryMan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryManGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeliveryManGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeliveryManGroupByArgs['orderBy'] }
        : { orderBy?: DeliveryManGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeliveryManGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeliveryManGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for DeliveryMan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DeliveryManClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Deliveries<T extends DeliveriesFindManyArgs = {}>(args?: Subset<T, DeliveriesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Deliveries>| Null>, PrismaPromise<Array<DeliveriesGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * DeliveryMan base type for findUnique actions
   */
  export type DeliveryManFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the DeliveryMan
     * 
    **/
    select?: DeliveryManSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveryManInclude | null
    /**
     * Filter, which DeliveryMan to fetch.
     * 
    **/
    where: DeliveryManWhereUniqueInput
  }

  /**
   * DeliveryMan: findUnique
   */
  export interface DeliveryManFindUniqueArgs extends DeliveryManFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DeliveryMan base type for findFirst actions
   */
  export type DeliveryManFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the DeliveryMan
     * 
    **/
    select?: DeliveryManSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveryManInclude | null
    /**
     * Filter, which DeliveryMan to fetch.
     * 
    **/
    where?: DeliveryManWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryMen to fetch.
     * 
    **/
    orderBy?: Enumerable<DeliveryManOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeliveryMen.
     * 
    **/
    cursor?: DeliveryManWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryMen from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryMen.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeliveryMen.
     * 
    **/
    distinct?: Enumerable<DeliveryManScalarFieldEnum>
  }

  /**
   * DeliveryMan: findFirst
   */
  export interface DeliveryManFindFirstArgs extends DeliveryManFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DeliveryMan findMany
   */
  export type DeliveryManFindManyArgs = {
    /**
     * Select specific fields to fetch from the DeliveryMan
     * 
    **/
    select?: DeliveryManSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveryManInclude | null
    /**
     * Filter, which DeliveryMen to fetch.
     * 
    **/
    where?: DeliveryManWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryMen to fetch.
     * 
    **/
    orderBy?: Enumerable<DeliveryManOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeliveryMen.
     * 
    **/
    cursor?: DeliveryManWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryMen from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryMen.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DeliveryManScalarFieldEnum>
  }


  /**
   * DeliveryMan create
   */
  export type DeliveryManCreateArgs = {
    /**
     * Select specific fields to fetch from the DeliveryMan
     * 
    **/
    select?: DeliveryManSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveryManInclude | null
    /**
     * The data needed to create a DeliveryMan.
     * 
    **/
    data: XOR<DeliveryManCreateInput, DeliveryManUncheckedCreateInput>
  }


  /**
   * DeliveryMan createMany
   */
  export type DeliveryManCreateManyArgs = {
    /**
     * The data used to create many DeliveryMen.
     * 
    **/
    data: Enumerable<DeliveryManCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DeliveryMan update
   */
  export type DeliveryManUpdateArgs = {
    /**
     * Select specific fields to fetch from the DeliveryMan
     * 
    **/
    select?: DeliveryManSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveryManInclude | null
    /**
     * The data needed to update a DeliveryMan.
     * 
    **/
    data: XOR<DeliveryManUpdateInput, DeliveryManUncheckedUpdateInput>
    /**
     * Choose, which DeliveryMan to update.
     * 
    **/
    where: DeliveryManWhereUniqueInput
  }


  /**
   * DeliveryMan updateMany
   */
  export type DeliveryManUpdateManyArgs = {
    /**
     * The data used to update DeliveryMen.
     * 
    **/
    data: XOR<DeliveryManUpdateManyMutationInput, DeliveryManUncheckedUpdateManyInput>
    /**
     * Filter which DeliveryMen to update
     * 
    **/
    where?: DeliveryManWhereInput
  }


  /**
   * DeliveryMan upsert
   */
  export type DeliveryManUpsertArgs = {
    /**
     * Select specific fields to fetch from the DeliveryMan
     * 
    **/
    select?: DeliveryManSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveryManInclude | null
    /**
     * The filter to search for the DeliveryMan to update in case it exists.
     * 
    **/
    where: DeliveryManWhereUniqueInput
    /**
     * In case the DeliveryMan found by the `where` argument doesn't exist, create a new DeliveryMan with this data.
     * 
    **/
    create: XOR<DeliveryManCreateInput, DeliveryManUncheckedCreateInput>
    /**
     * In case the DeliveryMan was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DeliveryManUpdateInput, DeliveryManUncheckedUpdateInput>
  }


  /**
   * DeliveryMan delete
   */
  export type DeliveryManDeleteArgs = {
    /**
     * Select specific fields to fetch from the DeliveryMan
     * 
    **/
    select?: DeliveryManSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveryManInclude | null
    /**
     * Filter which DeliveryMan to delete.
     * 
    **/
    where: DeliveryManWhereUniqueInput
  }


  /**
   * DeliveryMan deleteMany
   */
  export type DeliveryManDeleteManyArgs = {
    /**
     * Filter which DeliveryMen to delete
     * 
    **/
    where?: DeliveryManWhereInput
  }


  /**
   * DeliveryMan: findUniqueOrThrow
   */
  export type DeliveryManFindUniqueOrThrowArgs = DeliveryManFindUniqueArgsBase
      

  /**
   * DeliveryMan: findFirstOrThrow
   */
  export type DeliveryManFindFirstOrThrowArgs = DeliveryManFindFirstArgsBase
      

  /**
   * DeliveryMan without action
   */
  export type DeliveryManArgs = {
    /**
     * Select specific fields to fetch from the DeliveryMan
     * 
    **/
    select?: DeliveryManSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveryManInclude | null
  }



  /**
   * Model Clients
   */


  export type AggregateClients = {
    _count: ClientsCountAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  export type ClientsMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type ClientsMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type ClientsCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type ClientsMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type ClientsMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type ClientsCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type ClientsAggregateArgs = {
    /**
     * Filter which Clients to aggregate.
     * 
    **/
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientsMaxAggregateInputType
  }

  export type GetClientsAggregateType<T extends ClientsAggregateArgs> = {
        [P in keyof T & keyof AggregateClients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClients[P]>
      : GetScalarType<T[P], AggregateClients[P]>
  }




  export type ClientsGroupByArgs = {
    where?: ClientsWhereInput
    orderBy?: Enumerable<ClientsOrderByWithAggregationInput>
    by: Array<ClientsScalarFieldEnum>
    having?: ClientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientsCountAggregateInputType | true
    _min?: ClientsMinAggregateInputType
    _max?: ClientsMaxAggregateInputType
  }


  export type ClientsGroupByOutputType = {
    id: string
    username: string
    password: string
    _count: ClientsCountAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  type GetClientsGroupByPayload<T extends ClientsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientsGroupByOutputType[P]>
            : GetScalarType<T[P], ClientsGroupByOutputType[P]>
        }
      >
    >


  export type ClientsSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    Deliveries?: boolean | DeliveriesFindManyArgs
    _count?: boolean | ClientsCountOutputTypeArgs
  }

  export type ClientsInclude = {
    Deliveries?: boolean | DeliveriesFindManyArgs
    _count?: boolean | ClientsCountOutputTypeArgs
  }

  export type ClientsGetPayload<
    S extends boolean | null | undefined | ClientsArgs,
    U = keyof S
      > = S extends true
        ? Clients
    : S extends undefined
    ? never
    : S extends ClientsArgs | ClientsFindManyArgs
    ?'include' extends U
    ? Clients  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Deliveries' ? Array < DeliveriesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ClientsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Deliveries' ? Array < DeliveriesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ClientsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Clients ? Clients[P] : never
  } 
    : Clients
  : Clients


  type ClientsCountArgs = Merge<
    Omit<ClientsFindManyArgs, 'select' | 'include'> & {
      select?: ClientsCountAggregateInputType | true
    }
  >

  export interface ClientsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Clients that matches the filter.
     * @param {ClientsFindUniqueArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Clients'> extends True ? CheckSelect<T, Prisma__ClientsClient<Clients>, Prisma__ClientsClient<ClientsGetPayload<T>>> : CheckSelect<T, Prisma__ClientsClient<Clients | null, null>, Prisma__ClientsClient<ClientsGetPayload<T> | null, null>>

    /**
     * Find the first Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindFirstArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Clients'> extends True ? CheckSelect<T, Prisma__ClientsClient<Clients>, Prisma__ClientsClient<ClientsGetPayload<T>>> : CheckSelect<T, Prisma__ClientsClient<Clients | null, null>, Prisma__ClientsClient<ClientsGetPayload<T> | null, null>>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.clients.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.clients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientsWithIdOnly = await prisma.clients.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientsFindManyArgs>(
      args?: SelectSubset<T, ClientsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Clients>>, PrismaPromise<Array<ClientsGetPayload<T>>>>

    /**
     * Create a Clients.
     * @param {ClientsCreateArgs} args - Arguments to create a Clients.
     * @example
     * // Create one Clients
     * const Clients = await prisma.clients.create({
     *   data: {
     *     // ... data to create a Clients
     *   }
     * })
     * 
    **/
    create<T extends ClientsCreateArgs>(
      args: SelectSubset<T, ClientsCreateArgs>
    ): CheckSelect<T, Prisma__ClientsClient<Clients>, Prisma__ClientsClient<ClientsGetPayload<T>>>

    /**
     * Create many Clients.
     *     @param {ClientsCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const clients = await prisma.clients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientsCreateManyArgs>(
      args?: SelectSubset<T, ClientsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Clients.
     * @param {ClientsDeleteArgs} args - Arguments to delete one Clients.
     * @example
     * // Delete one Clients
     * const Clients = await prisma.clients.delete({
     *   where: {
     *     // ... filter to delete one Clients
     *   }
     * })
     * 
    **/
    delete<T extends ClientsDeleteArgs>(
      args: SelectSubset<T, ClientsDeleteArgs>
    ): CheckSelect<T, Prisma__ClientsClient<Clients>, Prisma__ClientsClient<ClientsGetPayload<T>>>

    /**
     * Update one Clients.
     * @param {ClientsUpdateArgs} args - Arguments to update one Clients.
     * @example
     * // Update one Clients
     * const clients = await prisma.clients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientsUpdateArgs>(
      args: SelectSubset<T, ClientsUpdateArgs>
    ): CheckSelect<T, Prisma__ClientsClient<Clients>, Prisma__ClientsClient<ClientsGetPayload<T>>>

    /**
     * Delete zero or more Clients.
     * @param {ClientsDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.clients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientsDeleteManyArgs>(
      args?: SelectSubset<T, ClientsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const clients = await prisma.clients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientsUpdateManyArgs>(
      args: SelectSubset<T, ClientsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Clients.
     * @param {ClientsUpsertArgs} args - Arguments to update or create a Clients.
     * @example
     * // Update or create a Clients
     * const clients = await prisma.clients.upsert({
     *   create: {
     *     // ... data to create a Clients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clients we want to update
     *   }
     * })
    **/
    upsert<T extends ClientsUpsertArgs>(
      args: SelectSubset<T, ClientsUpsertArgs>
    ): CheckSelect<T, Prisma__ClientsClient<Clients>, Prisma__ClientsClient<ClientsGetPayload<T>>>

    /**
     * Find one Clients that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ClientsFindUniqueOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClientsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ClientsClient<Clients>, Prisma__ClientsClient<ClientsGetPayload<T>>>

    /**
     * Find the first Clients that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindFirstOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClientsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ClientsClient<Clients>, Prisma__ClientsClient<ClientsGetPayload<T>>>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.clients.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientsCountArgs>(
      args?: Subset<T, ClientsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientsAggregateArgs>(args: Subset<T, ClientsAggregateArgs>): PrismaPromise<GetClientsAggregateType<T>>

    /**
     * Group by Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientsGroupByArgs['orderBy'] }
        : { orderBy?: ClientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Clients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Deliveries<T extends DeliveriesFindManyArgs = {}>(args?: Subset<T, DeliveriesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Deliveries>| Null>, PrismaPromise<Array<DeliveriesGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Clients base type for findUnique actions
   */
  export type ClientsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Clients
     * 
    **/
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientsInclude | null
    /**
     * Filter, which Clients to fetch.
     * 
    **/
    where: ClientsWhereUniqueInput
  }

  /**
   * Clients: findUnique
   */
  export interface ClientsFindUniqueArgs extends ClientsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Clients base type for findFirst actions
   */
  export type ClientsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Clients
     * 
    **/
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientsInclude | null
    /**
     * Filter, which Clients to fetch.
     * 
    **/
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     * 
    **/
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     * 
    **/
    distinct?: Enumerable<ClientsScalarFieldEnum>
  }

  /**
   * Clients: findFirst
   */
  export interface ClientsFindFirstArgs extends ClientsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Clients findMany
   */
  export type ClientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Clients
     * 
    **/
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientsInclude | null
    /**
     * Filter, which Clients to fetch.
     * 
    **/
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     * 
    **/
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClientsScalarFieldEnum>
  }


  /**
   * Clients create
   */
  export type ClientsCreateArgs = {
    /**
     * Select specific fields to fetch from the Clients
     * 
    **/
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientsInclude | null
    /**
     * The data needed to create a Clients.
     * 
    **/
    data: XOR<ClientsCreateInput, ClientsUncheckedCreateInput>
  }


  /**
   * Clients createMany
   */
  export type ClientsCreateManyArgs = {
    /**
     * The data used to create many Clients.
     * 
    **/
    data: Enumerable<ClientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Clients update
   */
  export type ClientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Clients
     * 
    **/
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientsInclude | null
    /**
     * The data needed to update a Clients.
     * 
    **/
    data: XOR<ClientsUpdateInput, ClientsUncheckedUpdateInput>
    /**
     * Choose, which Clients to update.
     * 
    **/
    where: ClientsWhereUniqueInput
  }


  /**
   * Clients updateMany
   */
  export type ClientsUpdateManyArgs = {
    /**
     * The data used to update Clients.
     * 
    **/
    data: XOR<ClientsUpdateManyMutationInput, ClientsUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     * 
    **/
    where?: ClientsWhereInput
  }


  /**
   * Clients upsert
   */
  export type ClientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Clients
     * 
    **/
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientsInclude | null
    /**
     * The filter to search for the Clients to update in case it exists.
     * 
    **/
    where: ClientsWhereUniqueInput
    /**
     * In case the Clients found by the `where` argument doesn't exist, create a new Clients with this data.
     * 
    **/
    create: XOR<ClientsCreateInput, ClientsUncheckedCreateInput>
    /**
     * In case the Clients was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ClientsUpdateInput, ClientsUncheckedUpdateInput>
  }


  /**
   * Clients delete
   */
  export type ClientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Clients
     * 
    **/
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientsInclude | null
    /**
     * Filter which Clients to delete.
     * 
    **/
    where: ClientsWhereUniqueInput
  }


  /**
   * Clients deleteMany
   */
  export type ClientsDeleteManyArgs = {
    /**
     * Filter which Clients to delete
     * 
    **/
    where?: ClientsWhereInput
  }


  /**
   * Clients: findUniqueOrThrow
   */
  export type ClientsFindUniqueOrThrowArgs = ClientsFindUniqueArgsBase
      

  /**
   * Clients: findFirstOrThrow
   */
  export type ClientsFindFirstOrThrowArgs = ClientsFindFirstArgsBase
      

  /**
   * Clients without action
   */
  export type ClientsArgs = {
    /**
     * Select specific fields to fetch from the Clients
     * 
    **/
    select?: ClientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ClientsInclude | null
  }



  /**
   * Model Deliveries
   */


  export type AggregateDeliveries = {
    _count: DeliveriesCountAggregateOutputType | null
    _min: DeliveriesMinAggregateOutputType | null
    _max: DeliveriesMaxAggregateOutputType | null
  }

  export type DeliveriesMinAggregateOutputType = {
    id: string | null
    id_client: string | null
    id_deliveryman: string | null
    item_name: string | null
    created_at: Date | null
    end_at: Date | null
  }

  export type DeliveriesMaxAggregateOutputType = {
    id: string | null
    id_client: string | null
    id_deliveryman: string | null
    item_name: string | null
    created_at: Date | null
    end_at: Date | null
  }

  export type DeliveriesCountAggregateOutputType = {
    id: number
    id_client: number
    id_deliveryman: number
    item_name: number
    created_at: number
    end_at: number
    _all: number
  }


  export type DeliveriesMinAggregateInputType = {
    id?: true
    id_client?: true
    id_deliveryman?: true
    item_name?: true
    created_at?: true
    end_at?: true
  }

  export type DeliveriesMaxAggregateInputType = {
    id?: true
    id_client?: true
    id_deliveryman?: true
    item_name?: true
    created_at?: true
    end_at?: true
  }

  export type DeliveriesCountAggregateInputType = {
    id?: true
    id_client?: true
    id_deliveryman?: true
    item_name?: true
    created_at?: true
    end_at?: true
    _all?: true
  }

  export type DeliveriesAggregateArgs = {
    /**
     * Filter which Deliveries to aggregate.
     * 
    **/
    where?: DeliveriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deliveries to fetch.
     * 
    **/
    orderBy?: Enumerable<DeliveriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DeliveriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deliveries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deliveries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Deliveries
    **/
    _count?: true | DeliveriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeliveriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeliveriesMaxAggregateInputType
  }

  export type GetDeliveriesAggregateType<T extends DeliveriesAggregateArgs> = {
        [P in keyof T & keyof AggregateDeliveries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeliveries[P]>
      : GetScalarType<T[P], AggregateDeliveries[P]>
  }




  export type DeliveriesGroupByArgs = {
    where?: DeliveriesWhereInput
    orderBy?: Enumerable<DeliveriesOrderByWithAggregationInput>
    by: Array<DeliveriesScalarFieldEnum>
    having?: DeliveriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeliveriesCountAggregateInputType | true
    _min?: DeliveriesMinAggregateInputType
    _max?: DeliveriesMaxAggregateInputType
  }


  export type DeliveriesGroupByOutputType = {
    id: string
    id_client: string
    id_deliveryman: string
    item_name: string
    created_at: Date
    end_at: Date
    _count: DeliveriesCountAggregateOutputType | null
    _min: DeliveriesMinAggregateOutputType | null
    _max: DeliveriesMaxAggregateOutputType | null
  }

  type GetDeliveriesGroupByPayload<T extends DeliveriesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DeliveriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeliveriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeliveriesGroupByOutputType[P]>
            : GetScalarType<T[P], DeliveriesGroupByOutputType[P]>
        }
      >
    >


  export type DeliveriesSelect = {
    id?: boolean
    id_client?: boolean
    client?: boolean | ClientsArgs
    id_deliveryman?: boolean
    deliveryman?: boolean | DeliveryManArgs
    item_name?: boolean
    created_at?: boolean
    end_at?: boolean
  }

  export type DeliveriesInclude = {
    client?: boolean | ClientsArgs
    deliveryman?: boolean | DeliveryManArgs
  }

  export type DeliveriesGetPayload<
    S extends boolean | null | undefined | DeliveriesArgs,
    U = keyof S
      > = S extends true
        ? Deliveries
    : S extends undefined
    ? never
    : S extends DeliveriesArgs | DeliveriesFindManyArgs
    ?'include' extends U
    ? Deliveries  & {
    [P in TrueKeys<S['include']>]:
        P extends 'client' ? ClientsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'deliveryman' ? DeliveryManGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'client' ? ClientsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'deliveryman' ? DeliveryManGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Deliveries ? Deliveries[P] : never
  } 
    : Deliveries
  : Deliveries


  type DeliveriesCountArgs = Merge<
    Omit<DeliveriesFindManyArgs, 'select' | 'include'> & {
      select?: DeliveriesCountAggregateInputType | true
    }
  >

  export interface DeliveriesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Deliveries that matches the filter.
     * @param {DeliveriesFindUniqueArgs} args - Arguments to find a Deliveries
     * @example
     * // Get one Deliveries
     * const deliveries = await prisma.deliveries.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DeliveriesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DeliveriesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Deliveries'> extends True ? CheckSelect<T, Prisma__DeliveriesClient<Deliveries>, Prisma__DeliveriesClient<DeliveriesGetPayload<T>>> : CheckSelect<T, Prisma__DeliveriesClient<Deliveries | null, null>, Prisma__DeliveriesClient<DeliveriesGetPayload<T> | null, null>>

    /**
     * Find the first Deliveries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveriesFindFirstArgs} args - Arguments to find a Deliveries
     * @example
     * // Get one Deliveries
     * const deliveries = await prisma.deliveries.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DeliveriesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DeliveriesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Deliveries'> extends True ? CheckSelect<T, Prisma__DeliveriesClient<Deliveries>, Prisma__DeliveriesClient<DeliveriesGetPayload<T>>> : CheckSelect<T, Prisma__DeliveriesClient<Deliveries | null, null>, Prisma__DeliveriesClient<DeliveriesGetPayload<T> | null, null>>

    /**
     * Find zero or more Deliveries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deliveries
     * const deliveries = await prisma.deliveries.findMany()
     * 
     * // Get first 10 Deliveries
     * const deliveries = await prisma.deliveries.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deliveriesWithIdOnly = await prisma.deliveries.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DeliveriesFindManyArgs>(
      args?: SelectSubset<T, DeliveriesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Deliveries>>, PrismaPromise<Array<DeliveriesGetPayload<T>>>>

    /**
     * Create a Deliveries.
     * @param {DeliveriesCreateArgs} args - Arguments to create a Deliveries.
     * @example
     * // Create one Deliveries
     * const Deliveries = await prisma.deliveries.create({
     *   data: {
     *     // ... data to create a Deliveries
     *   }
     * })
     * 
    **/
    create<T extends DeliveriesCreateArgs>(
      args: SelectSubset<T, DeliveriesCreateArgs>
    ): CheckSelect<T, Prisma__DeliveriesClient<Deliveries>, Prisma__DeliveriesClient<DeliveriesGetPayload<T>>>

    /**
     * Create many Deliveries.
     *     @param {DeliveriesCreateManyArgs} args - Arguments to create many Deliveries.
     *     @example
     *     // Create many Deliveries
     *     const deliveries = await prisma.deliveries.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DeliveriesCreateManyArgs>(
      args?: SelectSubset<T, DeliveriesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Deliveries.
     * @param {DeliveriesDeleteArgs} args - Arguments to delete one Deliveries.
     * @example
     * // Delete one Deliveries
     * const Deliveries = await prisma.deliveries.delete({
     *   where: {
     *     // ... filter to delete one Deliveries
     *   }
     * })
     * 
    **/
    delete<T extends DeliveriesDeleteArgs>(
      args: SelectSubset<T, DeliveriesDeleteArgs>
    ): CheckSelect<T, Prisma__DeliveriesClient<Deliveries>, Prisma__DeliveriesClient<DeliveriesGetPayload<T>>>

    /**
     * Update one Deliveries.
     * @param {DeliveriesUpdateArgs} args - Arguments to update one Deliveries.
     * @example
     * // Update one Deliveries
     * const deliveries = await prisma.deliveries.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DeliveriesUpdateArgs>(
      args: SelectSubset<T, DeliveriesUpdateArgs>
    ): CheckSelect<T, Prisma__DeliveriesClient<Deliveries>, Prisma__DeliveriesClient<DeliveriesGetPayload<T>>>

    /**
     * Delete zero or more Deliveries.
     * @param {DeliveriesDeleteManyArgs} args - Arguments to filter Deliveries to delete.
     * @example
     * // Delete a few Deliveries
     * const { count } = await prisma.deliveries.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DeliveriesDeleteManyArgs>(
      args?: SelectSubset<T, DeliveriesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deliveries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deliveries
     * const deliveries = await prisma.deliveries.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DeliveriesUpdateManyArgs>(
      args: SelectSubset<T, DeliveriesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Deliveries.
     * @param {DeliveriesUpsertArgs} args - Arguments to update or create a Deliveries.
     * @example
     * // Update or create a Deliveries
     * const deliveries = await prisma.deliveries.upsert({
     *   create: {
     *     // ... data to create a Deliveries
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Deliveries we want to update
     *   }
     * })
    **/
    upsert<T extends DeliveriesUpsertArgs>(
      args: SelectSubset<T, DeliveriesUpsertArgs>
    ): CheckSelect<T, Prisma__DeliveriesClient<Deliveries>, Prisma__DeliveriesClient<DeliveriesGetPayload<T>>>

    /**
     * Find one Deliveries that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {DeliveriesFindUniqueOrThrowArgs} args - Arguments to find a Deliveries
     * @example
     * // Get one Deliveries
     * const deliveries = await prisma.deliveries.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DeliveriesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DeliveriesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__DeliveriesClient<Deliveries>, Prisma__DeliveriesClient<DeliveriesGetPayload<T>>>

    /**
     * Find the first Deliveries that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveriesFindFirstOrThrowArgs} args - Arguments to find a Deliveries
     * @example
     * // Get one Deliveries
     * const deliveries = await prisma.deliveries.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DeliveriesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DeliveriesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__DeliveriesClient<Deliveries>, Prisma__DeliveriesClient<DeliveriesGetPayload<T>>>

    /**
     * Count the number of Deliveries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveriesCountArgs} args - Arguments to filter Deliveries to count.
     * @example
     * // Count the number of Deliveries
     * const count = await prisma.deliveries.count({
     *   where: {
     *     // ... the filter for the Deliveries we want to count
     *   }
     * })
    **/
    count<T extends DeliveriesCountArgs>(
      args?: Subset<T, DeliveriesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeliveriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Deliveries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeliveriesAggregateArgs>(args: Subset<T, DeliveriesAggregateArgs>): PrismaPromise<GetDeliveriesAggregateType<T>>

    /**
     * Group by Deliveries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeliveriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeliveriesGroupByArgs['orderBy'] }
        : { orderBy?: DeliveriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeliveriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeliveriesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Deliveries.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DeliveriesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    client<T extends ClientsArgs = {}>(args?: Subset<T, ClientsArgs>): CheckSelect<T, Prisma__ClientsClient<Clients | Null>, Prisma__ClientsClient<ClientsGetPayload<T> | Null>>;

    deliveryman<T extends DeliveryManArgs = {}>(args?: Subset<T, DeliveryManArgs>): CheckSelect<T, Prisma__DeliveryManClient<DeliveryMan | Null>, Prisma__DeliveryManClient<DeliveryManGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Deliveries base type for findUnique actions
   */
  export type DeliveriesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Deliveries
     * 
    **/
    select?: DeliveriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveriesInclude | null
    /**
     * Filter, which Deliveries to fetch.
     * 
    **/
    where: DeliveriesWhereUniqueInput
  }

  /**
   * Deliveries: findUnique
   */
  export interface DeliveriesFindUniqueArgs extends DeliveriesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Deliveries base type for findFirst actions
   */
  export type DeliveriesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Deliveries
     * 
    **/
    select?: DeliveriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveriesInclude | null
    /**
     * Filter, which Deliveries to fetch.
     * 
    **/
    where?: DeliveriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deliveries to fetch.
     * 
    **/
    orderBy?: Enumerable<DeliveriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Deliveries.
     * 
    **/
    cursor?: DeliveriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deliveries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deliveries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Deliveries.
     * 
    **/
    distinct?: Enumerable<DeliveriesScalarFieldEnum>
  }

  /**
   * Deliveries: findFirst
   */
  export interface DeliveriesFindFirstArgs extends DeliveriesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Deliveries findMany
   */
  export type DeliveriesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Deliveries
     * 
    **/
    select?: DeliveriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveriesInclude | null
    /**
     * Filter, which Deliveries to fetch.
     * 
    **/
    where?: DeliveriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deliveries to fetch.
     * 
    **/
    orderBy?: Enumerable<DeliveriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Deliveries.
     * 
    **/
    cursor?: DeliveriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deliveries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deliveries.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DeliveriesScalarFieldEnum>
  }


  /**
   * Deliveries create
   */
  export type DeliveriesCreateArgs = {
    /**
     * Select specific fields to fetch from the Deliveries
     * 
    **/
    select?: DeliveriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveriesInclude | null
    /**
     * The data needed to create a Deliveries.
     * 
    **/
    data: XOR<DeliveriesCreateInput, DeliveriesUncheckedCreateInput>
  }


  /**
   * Deliveries createMany
   */
  export type DeliveriesCreateManyArgs = {
    /**
     * The data used to create many Deliveries.
     * 
    **/
    data: Enumerable<DeliveriesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Deliveries update
   */
  export type DeliveriesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Deliveries
     * 
    **/
    select?: DeliveriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveriesInclude | null
    /**
     * The data needed to update a Deliveries.
     * 
    **/
    data: XOR<DeliveriesUpdateInput, DeliveriesUncheckedUpdateInput>
    /**
     * Choose, which Deliveries to update.
     * 
    **/
    where: DeliveriesWhereUniqueInput
  }


  /**
   * Deliveries updateMany
   */
  export type DeliveriesUpdateManyArgs = {
    /**
     * The data used to update Deliveries.
     * 
    **/
    data: XOR<DeliveriesUpdateManyMutationInput, DeliveriesUncheckedUpdateManyInput>
    /**
     * Filter which Deliveries to update
     * 
    **/
    where?: DeliveriesWhereInput
  }


  /**
   * Deliveries upsert
   */
  export type DeliveriesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Deliveries
     * 
    **/
    select?: DeliveriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveriesInclude | null
    /**
     * The filter to search for the Deliveries to update in case it exists.
     * 
    **/
    where: DeliveriesWhereUniqueInput
    /**
     * In case the Deliveries found by the `where` argument doesn't exist, create a new Deliveries with this data.
     * 
    **/
    create: XOR<DeliveriesCreateInput, DeliveriesUncheckedCreateInput>
    /**
     * In case the Deliveries was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DeliveriesUpdateInput, DeliveriesUncheckedUpdateInput>
  }


  /**
   * Deliveries delete
   */
  export type DeliveriesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Deliveries
     * 
    **/
    select?: DeliveriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveriesInclude | null
    /**
     * Filter which Deliveries to delete.
     * 
    **/
    where: DeliveriesWhereUniqueInput
  }


  /**
   * Deliveries deleteMany
   */
  export type DeliveriesDeleteManyArgs = {
    /**
     * Filter which Deliveries to delete
     * 
    **/
    where?: DeliveriesWhereInput
  }


  /**
   * Deliveries: findUniqueOrThrow
   */
  export type DeliveriesFindUniqueOrThrowArgs = DeliveriesFindUniqueArgsBase
      

  /**
   * Deliveries: findFirstOrThrow
   */
  export type DeliveriesFindFirstOrThrowArgs = DeliveriesFindFirstArgsBase
      

  /**
   * Deliveries without action
   */
  export type DeliveriesArgs = {
    /**
     * Select specific fields to fetch from the Deliveries
     * 
    **/
    select?: DeliveriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DeliveriesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ClientsScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type ClientsScalarFieldEnum = (typeof ClientsScalarFieldEnum)[keyof typeof ClientsScalarFieldEnum]


  export const DeliveriesScalarFieldEnum: {
    id: 'id',
    id_client: 'id_client',
    id_deliveryman: 'id_deliveryman',
    item_name: 'item_name',
    created_at: 'created_at',
    end_at: 'end_at'
  };

  export type DeliveriesScalarFieldEnum = (typeof DeliveriesScalarFieldEnum)[keyof typeof DeliveriesScalarFieldEnum]


  export const DeliveryManScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type DeliveryManScalarFieldEnum = (typeof DeliveryManScalarFieldEnum)[keyof typeof DeliveryManScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type DeliveryManWhereInput = {
    AND?: Enumerable<DeliveryManWhereInput>
    OR?: Enumerable<DeliveryManWhereInput>
    NOT?: Enumerable<DeliveryManWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    Deliveries?: DeliveriesListRelationFilter
  }

  export type DeliveryManOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    Deliveries?: DeliveriesOrderByRelationAggregateInput
  }

  export type DeliveryManWhereUniqueInput = {
    id?: string
    username?: string
  }

  export type DeliveryManOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: DeliveryManCountOrderByAggregateInput
    _max?: DeliveryManMaxOrderByAggregateInput
    _min?: DeliveryManMinOrderByAggregateInput
  }

  export type DeliveryManScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DeliveryManScalarWhereWithAggregatesInput>
    OR?: Enumerable<DeliveryManScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DeliveryManScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type ClientsWhereInput = {
    AND?: Enumerable<ClientsWhereInput>
    OR?: Enumerable<ClientsWhereInput>
    NOT?: Enumerable<ClientsWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    Deliveries?: DeliveriesListRelationFilter
  }

  export type ClientsOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    Deliveries?: DeliveriesOrderByRelationAggregateInput
  }

  export type ClientsWhereUniqueInput = {
    id?: string
    username?: string
  }

  export type ClientsOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: ClientsCountOrderByAggregateInput
    _max?: ClientsMaxOrderByAggregateInput
    _min?: ClientsMinOrderByAggregateInput
  }

  export type ClientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClientsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type DeliveriesWhereInput = {
    AND?: Enumerable<DeliveriesWhereInput>
    OR?: Enumerable<DeliveriesWhereInput>
    NOT?: Enumerable<DeliveriesWhereInput>
    id?: StringFilter | string
    id_client?: StringFilter | string
    client?: XOR<ClientsRelationFilter, ClientsWhereInput>
    id_deliveryman?: StringFilter | string
    deliveryman?: XOR<DeliveryManRelationFilter, DeliveryManWhereInput>
    item_name?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    end_at?: DateTimeFilter | Date | string
  }

  export type DeliveriesOrderByWithRelationInput = {
    id?: SortOrder
    id_client?: SortOrder
    client?: ClientsOrderByWithRelationInput
    id_deliveryman?: SortOrder
    deliveryman?: DeliveryManOrderByWithRelationInput
    item_name?: SortOrder
    created_at?: SortOrder
    end_at?: SortOrder
  }

  export type DeliveriesWhereUniqueInput = {
    id?: string
  }

  export type DeliveriesOrderByWithAggregationInput = {
    id?: SortOrder
    id_client?: SortOrder
    id_deliveryman?: SortOrder
    item_name?: SortOrder
    created_at?: SortOrder
    end_at?: SortOrder
    _count?: DeliveriesCountOrderByAggregateInput
    _max?: DeliveriesMaxOrderByAggregateInput
    _min?: DeliveriesMinOrderByAggregateInput
  }

  export type DeliveriesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DeliveriesScalarWhereWithAggregatesInput>
    OR?: Enumerable<DeliveriesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DeliveriesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    id_client?: StringWithAggregatesFilter | string
    id_deliveryman?: StringWithAggregatesFilter | string
    item_name?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    end_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type DeliveryManCreateInput = {
    id?: string
    username: string
    password: string
    Deliveries?: DeliveriesCreateNestedManyWithoutDeliverymanInput
  }

  export type DeliveryManUncheckedCreateInput = {
    id?: string
    username: string
    password: string
    Deliveries?: DeliveriesUncheckedCreateNestedManyWithoutDeliverymanInput
  }

  export type DeliveryManUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Deliveries?: DeliveriesUpdateManyWithoutDeliverymanNestedInput
  }

  export type DeliveryManUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Deliveries?: DeliveriesUncheckedUpdateManyWithoutDeliverymanNestedInput
  }

  export type DeliveryManCreateManyInput = {
    id?: string
    username: string
    password: string
  }

  export type DeliveryManUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type DeliveryManUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ClientsCreateInput = {
    id?: string
    username: string
    password: string
    Deliveries?: DeliveriesCreateNestedManyWithoutClientInput
  }

  export type ClientsUncheckedCreateInput = {
    id?: string
    username: string
    password: string
    Deliveries?: DeliveriesUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Deliveries?: DeliveriesUpdateManyWithoutClientNestedInput
  }

  export type ClientsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Deliveries?: DeliveriesUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientsCreateManyInput = {
    id?: string
    username: string
    password: string
  }

  export type ClientsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ClientsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type DeliveriesCreateInput = {
    id?: string
    client: ClientsCreateNestedOneWithoutDeliveriesInput
    deliveryman: DeliveryManCreateNestedOneWithoutDeliveriesInput
    item_name: string
    created_at?: Date | string
    end_at?: Date | string
  }

  export type DeliveriesUncheckedCreateInput = {
    id?: string
    id_client: string
    id_deliveryman: string
    item_name: string
    created_at?: Date | string
    end_at?: Date | string
  }

  export type DeliveriesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    client?: ClientsUpdateOneRequiredWithoutDeliveriesNestedInput
    deliveryman?: DeliveryManUpdateOneRequiredWithoutDeliveriesNestedInput
    item_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveriesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_client?: StringFieldUpdateOperationsInput | string
    id_deliveryman?: StringFieldUpdateOperationsInput | string
    item_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveriesCreateManyInput = {
    id?: string
    id_client: string
    id_deliveryman: string
    item_name: string
    created_at?: Date | string
    end_at?: Date | string
  }

  export type DeliveriesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    item_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveriesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_client?: StringFieldUpdateOperationsInput | string
    id_deliveryman?: StringFieldUpdateOperationsInput | string
    item_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DeliveriesListRelationFilter = {
    every?: DeliveriesWhereInput
    some?: DeliveriesWhereInput
    none?: DeliveriesWhereInput
  }

  export type DeliveriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeliveryManCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type DeliveryManMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type DeliveryManMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type ClientsCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type ClientsMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type ClientsMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type ClientsRelationFilter = {
    is?: ClientsWhereInput
    isNot?: ClientsWhereInput
  }

  export type DeliveryManRelationFilter = {
    is?: DeliveryManWhereInput
    isNot?: DeliveryManWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DeliveriesCountOrderByAggregateInput = {
    id?: SortOrder
    id_client?: SortOrder
    id_deliveryman?: SortOrder
    item_name?: SortOrder
    created_at?: SortOrder
    end_at?: SortOrder
  }

  export type DeliveriesMaxOrderByAggregateInput = {
    id?: SortOrder
    id_client?: SortOrder
    id_deliveryman?: SortOrder
    item_name?: SortOrder
    created_at?: SortOrder
    end_at?: SortOrder
  }

  export type DeliveriesMinOrderByAggregateInput = {
    id?: SortOrder
    id_client?: SortOrder
    id_deliveryman?: SortOrder
    item_name?: SortOrder
    created_at?: SortOrder
    end_at?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DeliveriesCreateNestedManyWithoutDeliverymanInput = {
    create?: XOR<Enumerable<DeliveriesCreateWithoutDeliverymanInput>, Enumerable<DeliveriesUncheckedCreateWithoutDeliverymanInput>>
    connectOrCreate?: Enumerable<DeliveriesCreateOrConnectWithoutDeliverymanInput>
    createMany?: DeliveriesCreateManyDeliverymanInputEnvelope
    connect?: Enumerable<DeliveriesWhereUniqueInput>
  }

  export type DeliveriesUncheckedCreateNestedManyWithoutDeliverymanInput = {
    create?: XOR<Enumerable<DeliveriesCreateWithoutDeliverymanInput>, Enumerable<DeliveriesUncheckedCreateWithoutDeliverymanInput>>
    connectOrCreate?: Enumerable<DeliveriesCreateOrConnectWithoutDeliverymanInput>
    createMany?: DeliveriesCreateManyDeliverymanInputEnvelope
    connect?: Enumerable<DeliveriesWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DeliveriesUpdateManyWithoutDeliverymanNestedInput = {
    create?: XOR<Enumerable<DeliveriesCreateWithoutDeliverymanInput>, Enumerable<DeliveriesUncheckedCreateWithoutDeliverymanInput>>
    connectOrCreate?: Enumerable<DeliveriesCreateOrConnectWithoutDeliverymanInput>
    upsert?: Enumerable<DeliveriesUpsertWithWhereUniqueWithoutDeliverymanInput>
    createMany?: DeliveriesCreateManyDeliverymanInputEnvelope
    set?: Enumerable<DeliveriesWhereUniqueInput>
    disconnect?: Enumerable<DeliveriesWhereUniqueInput>
    delete?: Enumerable<DeliveriesWhereUniqueInput>
    connect?: Enumerable<DeliveriesWhereUniqueInput>
    update?: Enumerable<DeliveriesUpdateWithWhereUniqueWithoutDeliverymanInput>
    updateMany?: Enumerable<DeliveriesUpdateManyWithWhereWithoutDeliverymanInput>
    deleteMany?: Enumerable<DeliveriesScalarWhereInput>
  }

  export type DeliveriesUncheckedUpdateManyWithoutDeliverymanNestedInput = {
    create?: XOR<Enumerable<DeliveriesCreateWithoutDeliverymanInput>, Enumerable<DeliveriesUncheckedCreateWithoutDeliverymanInput>>
    connectOrCreate?: Enumerable<DeliveriesCreateOrConnectWithoutDeliverymanInput>
    upsert?: Enumerable<DeliveriesUpsertWithWhereUniqueWithoutDeliverymanInput>
    createMany?: DeliveriesCreateManyDeliverymanInputEnvelope
    set?: Enumerable<DeliveriesWhereUniqueInput>
    disconnect?: Enumerable<DeliveriesWhereUniqueInput>
    delete?: Enumerable<DeliveriesWhereUniqueInput>
    connect?: Enumerable<DeliveriesWhereUniqueInput>
    update?: Enumerable<DeliveriesUpdateWithWhereUniqueWithoutDeliverymanInput>
    updateMany?: Enumerable<DeliveriesUpdateManyWithWhereWithoutDeliverymanInput>
    deleteMany?: Enumerable<DeliveriesScalarWhereInput>
  }

  export type DeliveriesCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<DeliveriesCreateWithoutClientInput>, Enumerable<DeliveriesUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<DeliveriesCreateOrConnectWithoutClientInput>
    createMany?: DeliveriesCreateManyClientInputEnvelope
    connect?: Enumerable<DeliveriesWhereUniqueInput>
  }

  export type DeliveriesUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<Enumerable<DeliveriesCreateWithoutClientInput>, Enumerable<DeliveriesUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<DeliveriesCreateOrConnectWithoutClientInput>
    createMany?: DeliveriesCreateManyClientInputEnvelope
    connect?: Enumerable<DeliveriesWhereUniqueInput>
  }

  export type DeliveriesUpdateManyWithoutClientNestedInput = {
    create?: XOR<Enumerable<DeliveriesCreateWithoutClientInput>, Enumerable<DeliveriesUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<DeliveriesCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<DeliveriesUpsertWithWhereUniqueWithoutClientInput>
    createMany?: DeliveriesCreateManyClientInputEnvelope
    set?: Enumerable<DeliveriesWhereUniqueInput>
    disconnect?: Enumerable<DeliveriesWhereUniqueInput>
    delete?: Enumerable<DeliveriesWhereUniqueInput>
    connect?: Enumerable<DeliveriesWhereUniqueInput>
    update?: Enumerable<DeliveriesUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<DeliveriesUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<DeliveriesScalarWhereInput>
  }

  export type DeliveriesUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<Enumerable<DeliveriesCreateWithoutClientInput>, Enumerable<DeliveriesUncheckedCreateWithoutClientInput>>
    connectOrCreate?: Enumerable<DeliveriesCreateOrConnectWithoutClientInput>
    upsert?: Enumerable<DeliveriesUpsertWithWhereUniqueWithoutClientInput>
    createMany?: DeliveriesCreateManyClientInputEnvelope
    set?: Enumerable<DeliveriesWhereUniqueInput>
    disconnect?: Enumerable<DeliveriesWhereUniqueInput>
    delete?: Enumerable<DeliveriesWhereUniqueInput>
    connect?: Enumerable<DeliveriesWhereUniqueInput>
    update?: Enumerable<DeliveriesUpdateWithWhereUniqueWithoutClientInput>
    updateMany?: Enumerable<DeliveriesUpdateManyWithWhereWithoutClientInput>
    deleteMany?: Enumerable<DeliveriesScalarWhereInput>
  }

  export type ClientsCreateNestedOneWithoutDeliveriesInput = {
    create?: XOR<ClientsCreateWithoutDeliveriesInput, ClientsUncheckedCreateWithoutDeliveriesInput>
    connectOrCreate?: ClientsCreateOrConnectWithoutDeliveriesInput
    connect?: ClientsWhereUniqueInput
  }

  export type DeliveryManCreateNestedOneWithoutDeliveriesInput = {
    create?: XOR<DeliveryManCreateWithoutDeliveriesInput, DeliveryManUncheckedCreateWithoutDeliveriesInput>
    connectOrCreate?: DeliveryManCreateOrConnectWithoutDeliveriesInput
    connect?: DeliveryManWhereUniqueInput
  }

  export type ClientsUpdateOneRequiredWithoutDeliveriesNestedInput = {
    create?: XOR<ClientsCreateWithoutDeliveriesInput, ClientsUncheckedCreateWithoutDeliveriesInput>
    connectOrCreate?: ClientsCreateOrConnectWithoutDeliveriesInput
    upsert?: ClientsUpsertWithoutDeliveriesInput
    connect?: ClientsWhereUniqueInput
    update?: XOR<ClientsUpdateWithoutDeliveriesInput, ClientsUncheckedUpdateWithoutDeliveriesInput>
  }

  export type DeliveryManUpdateOneRequiredWithoutDeliveriesNestedInput = {
    create?: XOR<DeliveryManCreateWithoutDeliveriesInput, DeliveryManUncheckedCreateWithoutDeliveriesInput>
    connectOrCreate?: DeliveryManCreateOrConnectWithoutDeliveriesInput
    upsert?: DeliveryManUpsertWithoutDeliveriesInput
    connect?: DeliveryManWhereUniqueInput
    update?: XOR<DeliveryManUpdateWithoutDeliveriesInput, DeliveryManUncheckedUpdateWithoutDeliveriesInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DeliveriesCreateWithoutDeliverymanInput = {
    id?: string
    client: ClientsCreateNestedOneWithoutDeliveriesInput
    item_name: string
    created_at?: Date | string
    end_at?: Date | string
  }

  export type DeliveriesUncheckedCreateWithoutDeliverymanInput = {
    id?: string
    id_client: string
    item_name: string
    created_at?: Date | string
    end_at?: Date | string
  }

  export type DeliveriesCreateOrConnectWithoutDeliverymanInput = {
    where: DeliveriesWhereUniqueInput
    create: XOR<DeliveriesCreateWithoutDeliverymanInput, DeliveriesUncheckedCreateWithoutDeliverymanInput>
  }

  export type DeliveriesCreateManyDeliverymanInputEnvelope = {
    data: Enumerable<DeliveriesCreateManyDeliverymanInput>
    skipDuplicates?: boolean
  }

  export type DeliveriesUpsertWithWhereUniqueWithoutDeliverymanInput = {
    where: DeliveriesWhereUniqueInput
    update: XOR<DeliveriesUpdateWithoutDeliverymanInput, DeliveriesUncheckedUpdateWithoutDeliverymanInput>
    create: XOR<DeliveriesCreateWithoutDeliverymanInput, DeliveriesUncheckedCreateWithoutDeliverymanInput>
  }

  export type DeliveriesUpdateWithWhereUniqueWithoutDeliverymanInput = {
    where: DeliveriesWhereUniqueInput
    data: XOR<DeliveriesUpdateWithoutDeliverymanInput, DeliveriesUncheckedUpdateWithoutDeliverymanInput>
  }

  export type DeliveriesUpdateManyWithWhereWithoutDeliverymanInput = {
    where: DeliveriesScalarWhereInput
    data: XOR<DeliveriesUpdateManyMutationInput, DeliveriesUncheckedUpdateManyWithoutDeliveriesInput>
  }

  export type DeliveriesScalarWhereInput = {
    AND?: Enumerable<DeliveriesScalarWhereInput>
    OR?: Enumerable<DeliveriesScalarWhereInput>
    NOT?: Enumerable<DeliveriesScalarWhereInput>
    id?: StringFilter | string
    id_client?: StringFilter | string
    id_deliveryman?: StringFilter | string
    item_name?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    end_at?: DateTimeFilter | Date | string
  }

  export type DeliveriesCreateWithoutClientInput = {
    id?: string
    deliveryman: DeliveryManCreateNestedOneWithoutDeliveriesInput
    item_name: string
    created_at?: Date | string
    end_at?: Date | string
  }

  export type DeliveriesUncheckedCreateWithoutClientInput = {
    id?: string
    id_deliveryman: string
    item_name: string
    created_at?: Date | string
    end_at?: Date | string
  }

  export type DeliveriesCreateOrConnectWithoutClientInput = {
    where: DeliveriesWhereUniqueInput
    create: XOR<DeliveriesCreateWithoutClientInput, DeliveriesUncheckedCreateWithoutClientInput>
  }

  export type DeliveriesCreateManyClientInputEnvelope = {
    data: Enumerable<DeliveriesCreateManyClientInput>
    skipDuplicates?: boolean
  }

  export type DeliveriesUpsertWithWhereUniqueWithoutClientInput = {
    where: DeliveriesWhereUniqueInput
    update: XOR<DeliveriesUpdateWithoutClientInput, DeliveriesUncheckedUpdateWithoutClientInput>
    create: XOR<DeliveriesCreateWithoutClientInput, DeliveriesUncheckedCreateWithoutClientInput>
  }

  export type DeliveriesUpdateWithWhereUniqueWithoutClientInput = {
    where: DeliveriesWhereUniqueInput
    data: XOR<DeliveriesUpdateWithoutClientInput, DeliveriesUncheckedUpdateWithoutClientInput>
  }

  export type DeliveriesUpdateManyWithWhereWithoutClientInput = {
    where: DeliveriesScalarWhereInput
    data: XOR<DeliveriesUpdateManyMutationInput, DeliveriesUncheckedUpdateManyWithoutDeliveriesInput>
  }

  export type ClientsCreateWithoutDeliveriesInput = {
    id?: string
    username: string
    password: string
  }

  export type ClientsUncheckedCreateWithoutDeliveriesInput = {
    id?: string
    username: string
    password: string
  }

  export type ClientsCreateOrConnectWithoutDeliveriesInput = {
    where: ClientsWhereUniqueInput
    create: XOR<ClientsCreateWithoutDeliveriesInput, ClientsUncheckedCreateWithoutDeliveriesInput>
  }

  export type DeliveryManCreateWithoutDeliveriesInput = {
    id?: string
    username: string
    password: string
  }

  export type DeliveryManUncheckedCreateWithoutDeliveriesInput = {
    id?: string
    username: string
    password: string
  }

  export type DeliveryManCreateOrConnectWithoutDeliveriesInput = {
    where: DeliveryManWhereUniqueInput
    create: XOR<DeliveryManCreateWithoutDeliveriesInput, DeliveryManUncheckedCreateWithoutDeliveriesInput>
  }

  export type ClientsUpsertWithoutDeliveriesInput = {
    update: XOR<ClientsUpdateWithoutDeliveriesInput, ClientsUncheckedUpdateWithoutDeliveriesInput>
    create: XOR<ClientsCreateWithoutDeliveriesInput, ClientsUncheckedCreateWithoutDeliveriesInput>
  }

  export type ClientsUpdateWithoutDeliveriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ClientsUncheckedUpdateWithoutDeliveriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type DeliveryManUpsertWithoutDeliveriesInput = {
    update: XOR<DeliveryManUpdateWithoutDeliveriesInput, DeliveryManUncheckedUpdateWithoutDeliveriesInput>
    create: XOR<DeliveryManCreateWithoutDeliveriesInput, DeliveryManUncheckedCreateWithoutDeliveriesInput>
  }

  export type DeliveryManUpdateWithoutDeliveriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type DeliveryManUncheckedUpdateWithoutDeliveriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type DeliveriesCreateManyDeliverymanInput = {
    id?: string
    id_client: string
    item_name: string
    created_at?: Date | string
    end_at?: Date | string
  }

  export type DeliveriesUpdateWithoutDeliverymanInput = {
    id?: StringFieldUpdateOperationsInput | string
    client?: ClientsUpdateOneRequiredWithoutDeliveriesNestedInput
    item_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveriesUncheckedUpdateWithoutDeliverymanInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_client?: StringFieldUpdateOperationsInput | string
    item_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveriesUncheckedUpdateManyWithoutDeliveriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_client?: StringFieldUpdateOperationsInput | string
    item_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveriesCreateManyClientInput = {
    id?: string
    id_deliveryman: string
    item_name: string
    created_at?: Date | string
    end_at?: Date | string
  }

  export type DeliveriesUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    deliveryman?: DeliveryManUpdateOneRequiredWithoutDeliveriesNestedInput
    item_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveriesUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    id_deliveryman?: StringFieldUpdateOperationsInput | string
    item_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    end_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}